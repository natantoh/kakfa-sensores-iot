services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

    ports:
      - "9093:9092"  # Mapeia 9092 (interno) para 9093 (host)
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: iotuser
      POSTGRES_PASSWORD: iotpassword
      POSTGRES_DB: iotdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iotuser -d iotdata"]
      interval: 5s
      timeout: 5s
      retries: 10

  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:9092"  # Usa a porta interna do Kafka
      TOPIC_NAME: "iot-sensor-data"
    restart: unless-stopped

  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:9092"  # Usa a porta interna do Kafka
      TOPIC_NAME: "iot-sensor-data"
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "iotdata"
      POSTGRES_USER: "iotuser"
      POSTGRES_PASSWORD: "iotpassword"
    restart: unless-stopped
    # Remove o entrypoint com netcat (substituído pelo healthcheck do Kafka)

volumes:
  postgres_data:

  # Comandos para rodar:
  # Para rodar tudo, basta usar o comando abaixo no terminal, dentro da pasta onde está o arquivo docker-compose.yml:
  # docker-compose up --build

  # O que acontece:
  #- O Docker vai construir as imagens do producer e consumer (se ainda não existirem).
  #- Vai baixar as imagens do Kafka, Zookeeper e PostgreSQL.
  #- Vai subir todos os containers e conectar os serviços automaticamente.

  # Dicas:
  # Para rodar em segundo plano (background), use:
  # docker-compose up --build -d

  # Para parar tudo depois, use:
  # docker-compose down

  # Depois de qualquer ajuste:
  # docker-compose down -v
  # docker-compose up --build
